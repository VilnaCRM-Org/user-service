resources:
  App\User\Domain\Entity\User:
    exceptionToStatus:
      'App\User\Domain\Exception\UserTimedOutException': 429
      'App\User\Domain\Exception\UserNotFoundException': 404
      'App\User\Domain\Exception\InvalidPasswordException': 400
      'App\User\Domain\Exception\TokenNotFoundException': 404
      'App\User\Domain\Exception\DuplicateEmailException': 409
    normalizationContext:
      groups: ['output']

    operations:
      ApiPlatform\Metadata\GetCollection:
        paginationClientItemsPerPage: true
      ApiPlatform\Metadata\Get: ~
      create_http:
        class: 'ApiPlatform\Metadata\Post'
        input: 'App\User\Application\DTO\UserRegisterDto'
        processor: 'App\User\Application\Processor\RegisterUserProcessor'
      signin_http:
        class: ApiPlatform\Metadata\Post
        uriTemplate: '/oauth/signin'
        input: 'App\User\Application\DTO\SignInDto'
        controller: 'App\User\Infrastructure\Controller\AuthController::signin'
        openapi:
          tags: ['OAuth']
          summary: 'User sign in'
          description: 'Authenticate user and get session information'
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  required: ['email', 'password']
                  properties:
                    email:
                      type: string
                      format: email
                      example: 'user@example.com'
                    password:
                      type: string
                      example: 'password123'
                    rememberMe:
                      type: boolean
                      example: false
          responses:
            '200':
              description: 'Successful sign in'
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      twoFactorEnabled:
                        type: boolean
                        example: false
                      sessionId:
                        type: string
                        example: 'sess_1234567890abcdef'
            '400':
              description: 'Validation error'
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      errors:
                        type: object
                        example: { 'email': 'This field is required' }
            '401':
              description: 'Invalid credentials'
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      error:
                        type: string
                        example: 'Invalid credentials'
            '500':
              description: 'Internal server error'
      create_batch_http:
        class: 'ApiPlatform\Metadata\Post'
        input: 'App\User\Application\DTO\UserRegisterBatchDto'
        processor: 'App\User\Application\Processor\RegisterUserBatchProcessor'
        uriTemplate: 'users/batch'
      confirm_http:
        class: 'ApiPlatform\Metadata\Patch'
        input: 'App\User\Application\DTO\ConfirmUserDto'
        processor: 'App\User\Application\Processor\ConfirmUserProcessor'
        uriTemplate: 'users/confirm'
      ApiPlatform\Metadata\Patch:
        input: 'App\User\Application\DTO\UserPatchDto'
        processor: 'App\User\Application\Processor\UserPatchProcessor'
      ApiPlatform\Metadata\Put:
        input: 'App\User\Application\DTO\UserPutDto'
        processor: 'App\User\Application\Processor\UserPutProcessor'
      ApiPlatform\Metadata\Delete: ~
      ApiPlatform\Metadata\Post:
        uriTemplate: '/users/{id}/resend-confirmation-email'
        input: 'App\User\Application\DTO\RetryDto'
        processor: 'App\User\Application\Processor\ResendEmailProcessor'

    graphQlOperations:
      - class: 'ApiPlatform\Metadata\GraphQl\Query'
      - class: 'ApiPlatform\Metadata\GraphQl\QueryCollection'
      - class: 'ApiPlatform\Metadata\GraphQl\DeleteMutation'
        normalizationContext:
          groups: ['deleteMutationOutput']
        name: 'delete'
      - class: 'ApiPlatform\Metadata\GraphQl\Mutation'
        name: 'confirm'
        resolver: 'App\User\Application\Resolver\ConfirmUserMutationResolver'
        deserialize: false
        denormalizationContext:
          groups: []
        extraArgs:
          token:
            type: 'String!'
      - class: 'ApiPlatform\Metadata\GraphQl\Mutation'
        resolver: 'App\User\Application\Resolver\RegisterUserMutationResolver'
        deserialize: false
        name: 'create'
        denormalizationContext:
          groups: []
        extraArgs:
          email:
            type: 'String!'
          initials:
            type: 'String!'
          password:
            type: 'String!'
      - class: 'ApiPlatform\Metadata\GraphQl\Mutation'
        resolver: 'App\User\Application\Resolver\UserUpdateMutationResolver'
        deserialize: false
        write: false
        name: 'update'
        denormalizationContext:
          groups: []
        extraArgs:
          id:
            type: 'ID!'
          newPassword:
            type: 'String'
          password:
            type: 'String!'
          email:
            type: 'String'
          initials:
            type: 'String'
      - class: 'ApiPlatform\Metadata\GraphQl\Mutation'
        resolver: 'App\User\Application\Resolver\ResendEmailMutationResolver'
        name: 'resendEmailTo'
        denormalizationContext:
          groups: []
        extraArgs:
          id:
            type: 'ID!'

  App\Internal\HealthCheck\Domain\ValueObject\HealthCheck:
    operations:
      ApiPlatform\Metadata\Get:
        uriTemplate: '/health'
        controller: 'App\Internal\HealthCheck\Application\Controller\HealthCheckController'
        openapi:
          responses:
            '204':
              description: 'Health check passed with no content to return.'
            '500':
              description: 'Health check failed.'

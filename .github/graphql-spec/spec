type Query {
  node(id: ID!): Node
  user(id: ID!): User
  users(
    "Returns the first n elements from the list."
    first: Int

    "Returns the last n elements from the list."
    last: Int

    "Returns the elements in the list that come before the specified cursor."
    before: String

    "Returns the elements in the list that come after the specified cursor."
    after: String
  ): UserCursorConnection
}

"A node, according to the Relay specification."
interface Node {
  "The id of this node."
  id: ID!
}

type User implements Node {
  id: ID!
  confirmed: Boolean!
  email: String!
  initials: String!
}

"Cursor connection for User."
type UserCursorConnection {
  edges: [UserEdge]
  pageInfo: UserPageInfo!
  totalCount: Int!
}

"Edge of User."
type UserEdge {
  node: User
  cursor: String!
}

"Information about the current page."
type UserPageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Mutation {
  "Deletes a User."
  deleteUser(input: deleteUserInput!): deleteUserPayload

  "Confirms a User."
  confirmUser(input: confirmUserInput!): confirmUserPayload

  "Creates a User."
  createUser(input: createUserInput!): createUserPayload

  "Updates a User."
  updateUser(input: updateUserInput!): updateUserPayload

  "ResendEmailTos a User."
  resendEmailToUser(input: resendEmailToUserInput!): resendEmailToUserPayload
}

"Deletes a User."
input deleteUserInput {
  id: ID!
  clientMutationId: String
}

"Deletes a User."
type deleteUserPayload {
  user: deleteUserPayloadData
  clientMutationId: String
}

"Deletes a User."
type deleteUserPayloadData implements Node {
  id: ID!
}

"Confirms a User."
input confirmUserInput {
  clientMutationId: String
  token: String!
}

"Confirms a User."
type confirmUserPayload {
  user: User
  clientMutationId: String
}

"Creates a User."
input createUserInput {
  clientMutationId: String
  email: String!
  initials: String!
  password: String!
}

"Creates a User."
type createUserPayload {
  user: User
  clientMutationId: String
}

"Updates a User."
input updateUserInput {
  clientMutationId: String
  id: ID!
  newPassword: String
  password: String!
  email: String
  initials: String
}

"Updates a User."
type updateUserPayload {
  user: User
  clientMutationId: String
}

"ResendEmailTos a User."
input resendEmailToUserInput {
  clientMutationId: String
  id: ID!
}

"ResendEmailTos a User."
type resendEmailToUserPayload {
  user: User
  clientMutationId: String
}

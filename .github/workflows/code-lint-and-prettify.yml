name: Static analysis and fixers

on:
  pull_request:
    branches: ['main']

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token with necessary permissions
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.VILNACRM_APP_ID }}
          private_key: ${{ secrets.VILNACRM_APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          fetch-depth: 0

      - name: Import GPG key
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_config_global: true
          git_tag_gpgsign: true

      - name: Configure GPG for automated signing
        run: |
          export GPG_TTY=$(tty)
          echo "GPG_TTY=$GPG_TTY" >> $GITHUB_ENV
          echo "GPG_PASSPHRASE=${{ secrets.GPG_PASSPHRASE }}" >> $GITHUB_ENV
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          cat > ~/.gnupg/gpg.conf << EOF
          batch
          no-tty
          pinentry-mode loopback
          EOF
          cat > ~/.gnupg/gpg-agent.conf << EOF
          allow-loopback-pinentry
          pinentry-mode loopback
          max-cache-ttl 86400
          default-cache-ttl 86400
          EOF
          gpg-connect-agent reloadagent /bye || true
          cat > ~/.gnupg/gpg-wrapper.sh << 'EOF'
          #!/bin/bash
          export GPG_TTY=$(tty)
          case "$*" in
            *--detach-sign*|*--sign*)
              echo "$GPG_PASSPHRASE" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 "$@"
              ;;
            *)
              gpg "$@"
              ;;
          esac
          EOF
          chmod +x ~/.gnupg/gpg-wrapper.sh
          git config --global gpg.program ~/.gnupg/gpg-wrapper.sh
      - name: Test GPG signing
        run: |
          echo "Testing GPG signing..."
          echo "test message" | ~/.gnupg/gpg-wrapper.sh --armor --detach-sign > /dev/null 2>&1 && echo "✅ GPG signing works" || echo "❌ GPG signing failed"

      - name: Run Super-Linter
        continue-on-error: true
        uses: super-linter/super-linter@v7.1.0
        env:
          FILTER_REGEX_EXCLUDE: '^\\.github/openapi-spec/'
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_MARKDOWN: true
          VALIDATE_MARKDOWN_PRETTIER: true
          FIX_MARKDOWN_PRETTIER: true
          VALIDATE_YAML: true
          FIX_YAML_PRETTIER: true
          VALIDATE_YAML_PRETTIER: true
          VALIDATE_ENV: true
          VALIDATE_JAVASCRIPT_PRETTIER: true
          FIX_JAVASCRIPT_PRETTIER: true
          VALIDATE_ALL_CODEBASE: true
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

      - name: Commit and push linting fixes
        if: >
          github.event_name == 'pull_request' && github.ref_name !=
          github.event.repository.default_branch
        env:
          GPG_TTY: ${{ env.GPG_TTY }}
          GPG_PASSPHRASE: ${{ env.GPG_PASSPHRASE }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
          commit_message: 'chore(#${{ github.event.number }}): fix linting issues'
          commit_author: '${{ steps.import-gpg.outputs.name }} <${{ steps.import-gpg.outputs.email }}>'
          commit_user_name: ${{ steps.import-gpg.outputs.name }}
          commit_user_email: ${{ steps.import-gpg.outputs.email }}
          commit_options: '--signoff --gpg-sign'
